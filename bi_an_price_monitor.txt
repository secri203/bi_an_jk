// ==UserScript==
// @name         Binance alpha 价格监控助手
// @namespace    http://tampermonkey.net/
// @version      4.3
// @description  Binance alpha 价格监控助手，支持电脑端、手机端
// @author       Grok（github：https://github.com/secri203/bi_an_jk）
// @match        https://www.binance.com/zh-CN/alpha/*
// @grant        GM_xmlhttpRequest
// @connect      101.33.234.249
// ==/UserScript==

(function() {
    'use strict';

    // 全局配置
    const CONFIG = {
        // 用户名
        username: 'demo',
    };

    // 添加价格颜色样式到<head>
    const colorStyle = document.createElement('style');
    colorStyle.textContent = `
    .price-yellow { color: #F0B90B !important; }
    .price-green  { color: #00FF00 !important; }
    .price-red    { color: #FF0000 !important; }
    `;
    document.head.appendChild(colorStyle);

    // 创建滑块容器
    const sliderContainer = document.createElement('div');
    sliderContainer.style.cssText = `
        position: fixed !important;
        top: 110px !important;
        right: 20px !important;
        background: #1E2329 !important;
        padding: 0px !important;
        border-radius: 8px !important;
        z-index: 9999 !important;
        box-shadow: 0 0 10px rgba(0,0,0,0.3) !important;
        display: flex !important;
        flex-direction: column !important;
        align-items: center !important;
        gap: 10px !important;
        cursor: move !important;
        user-select: none !important;
        transition: height 0.3s ease !important;
    `;

    // 创建标题栏
    const titleBar = document.createElement('div');
    titleBar.style.cssText = `
        width: 100% !important;
        height: 30px !important;
        background: #2B3139 !important;
        border-radius: 8px 8px 0 0 !important;
        cursor: move !important;
        display: flex !important;
        justify-content: flex-end !important;
        align-items: center !important;
        padding: 0 12px !important;
        box-sizing: border-box !important;
        min-width: 120px !important;
    `;

    // 创建折叠按钮
    const collapseBtn = document.createElement('a');
    collapseBtn.textContent = '折叠';
    collapseBtn.style.cssText = `
        color: #F0B90B !important;
        text-decoration: none !important;
        font-size: 13px !important;
        cursor: pointer !important;
        user-select: none !important;
        padding: 4px 8px !important;
        border-radius: 4px !important;
        transition: background-color 0.2s !important;
    `;
    collapseBtn.onmouseover = function() {
        this.style.textDecoration = 'underline';
        this.style.backgroundColor = 'rgba(240, 185, 11, 0.1)';
    };
    collapseBtn.onmouseout = function() {
        this.style.textDecoration = 'none';
        this.style.backgroundColor = 'transparent';
    };

    // 添加折叠/展开功能
    let isCollapsed = false;
    collapseBtn.onclick = function(e) {
        e.stopPropagation(); // 阻止事件冒泡，避免触发拖拽
        isCollapsed = !isCollapsed;
        if (isCollapsed) {
            contentDiv.style.display = 'none';
            sliderContainer.style.height = '30px';
            collapseBtn.textContent = '展开';
        } else {
            contentDiv.style.display = 'flex';
            sliderContainer.style.height = 'auto';
            collapseBtn.textContent = '折叠';
        }
    };

    // 将折叠按钮添加到标题栏
    titleBar.appendChild(collapseBtn);

    // 创建内容区div
    const contentDiv = document.createElement('div');
    contentDiv.style.cssText = `
        width: 100%;
        padding: 15px;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
    `;

    // 创建价格显示
    const priceDisplay = document.createElement('div');
    priceDisplay.className = 'price-yellow';
    priceDisplay.style.cssText = `
        font-size: 22px !important;
        font-weight: bold !important;
        transition: color 0.3s ease !important;
    `;

    // 创建文本框
    const priceInput = document.createElement('input');
    priceInput.type = 'text';
    priceInput.style.cssText = `
        width: 120px;
        text-align: center;
        font-size: 18px;
        color: #F0B90B;
        background: #23272F;
        border: 1px solid #F0B90B;
        border-radius: 4px;
        margin: 6px 0;
        padding: 4px 0;
    `;

    // 创建滑块
    const slider = document.createElement('input');
    slider.type = 'range';
    slider.style.cssText = `
        width: 220px !important;
        height: 4px !important;
        -webkit-appearance: none !important;
        background: #2B3139 !important;
        border-radius: 2px !important;
        outline: none !important;
    `;

    // 自定义滑块样式
    const style = document.createElement('style');
    style.textContent = `
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            background: #F0B90B;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 0 4px #000;
        }
        input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #F0B90B;
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }
        input[type="range"]::-ms-thumb {
            width: 20px;
            height: 20px;
            background: #F0B90B;
            border-radius: 50%;
            cursor: pointer;
            border: none;
        }
        input[type="range"] {
            background: #2B3139;
        }
        .myx-btn {
            background: #2B3139 !important;
            color: #F0B90B !important;
            border: 1px solid #F0B90B !important;
            padding: 6px 18px !important;
            border-radius: 4px !important;
            cursor: pointer !important;
            font-size: 15px !important;
            margin: 0 8px !important;
            font-weight: bold !important;
            transition: background 0.2s;
        }
        .myx-btn:hover {
            background: #F0B90B !important;
            color: #1E2329 !important;
        }
        .myx-btn-group {
            display: flex;
            flex-direction: row;
            gap: 10px;
            margin-top: 6px;
        }
    `;
    document.head.appendChild(style);

    // 获取初始价格
    function getInitialPrice() {
        const allElements = document.querySelectorAll('*');
        for (let el of allElements) {
            if (el.textContent.includes('$') && el.textContent.match(/\d+\.\d+/)) {
                return parseFloat(el.textContent.match(/\d+\.\d+/)[0]);
            }
        }
        return 0.01;
    }

    // 获取币种名
    function getCoinType() {
        // 尝试获取页面上币种名（如TROLL11）
        // 1. 先找URL最后一段
        const urlParts = window.location.pathname.split('/');
        let coinType = urlParts[urlParts.length - 1];
        // 2. 页面上找div.text-PrimaryText
        const div = document.querySelector('div.text-PrimaryText');
        if (div && div.textContent) {
            coinType = div.textContent.trim();
        } else {
            // 兜底：找所有div
            const allDivs = document.getElementsByTagName('div');
            for (let d of allDivs) {
                if (d.className && d.className.includes('text-PrimaryText')) {
                    coinType = d.textContent.trim();
                    break;
                }
            }
        }
        return coinType;
    }

    // 初始化滑块
    const initialPrice = getInitialPrice();
    const range = initialPrice * 0.3; // ±30%
    const min = +(initialPrice - range).toFixed(6);
    const max = +(initialPrice + range).toFixed(6);
    const step = 0.000001;
    slider.min = min.toString();
    slider.max = max.toString();
    slider.step = step.toString();
    slider.value = initialPrice.toString();
    priceDisplay.textContent = `当前价格: $${parseFloat(slider.value).toFixed(6)}`;

    // 初始化文本框
    priceInput.value = parseFloat(slider.value).toFixed(6);

    // 滑块滑动时同步文本框
    slider.addEventListener('input', function() {
        // priceDisplay.textContent = `价格: $${parseFloat(this.value).toFixed(6)}`;
        priceInput.value = parseFloat(this.value).toFixed(6);
    });

    // 文本框输入时同步滑块
    priceInput.addEventListener('input', function() {
        let val = parseFloat(this.value);
        if (!isNaN(val)) {
            // 限制在滑块范围内
            if (val < min) val = min;
            if (val > max) val = max;
            slider.value = val;
            // priceDisplay.textContent = `价格: $${val.toFixed(6)}`;
        }
    });

    // 创建按钮组
    const btnGroup = document.createElement('div');
    btnGroup.className = 'myx-btn-group';

    // 创建下限按钮
    const btnLower = document.createElement('button');
    btnLower.className = 'myx-btn';
    btnLower.textContent = '设置监控下限';
    btnLower.onclick = function() {
        const price = parseFloat(priceInput.value).toFixed(6);
        const coinType = getCoinType();
        if (confirm(`确定将 $${price} 设置为${coinType}的监控下限价格吗？`)) {
            updateMonitor(coinType, '1', price);
        }
    };

    // 创建上限按钮
    const btnUpper = document.createElement('button');
    btnUpper.className = 'myx-btn';
    btnUpper.textContent = '设置监控上限';
    btnUpper.onclick = function() {
        const price = parseFloat(priceInput.value).toFixed(6);
        const coinType = getCoinType();
        if (confirm(`确定将 $${price} 设置为${coinType}的监控上限价格吗？`)) {
            updateMonitor(coinType, '0', price);
        }
    };

    btnGroup.appendChild(btnLower);
    btnGroup.appendChild(btnUpper);

    // 页面初始化时自动获取监控价格
    window.addEventListener('load', function() {
        const coinType = getCoinType();
        fetchMonitorPricesForMore(coinType);
    });

    // API请求函数（使用GM_xmlhttpRequest）
    function updateMonitor(coinType, monitorType, monitorPrice) {
        console.log('开始设置监控价格:', {
            coinType,
            monitorType,
            monitorPrice,
            username: CONFIG.username
        });

        const requestData = {
            coin_type: coinType,
            monitor_type: monitorType,
            monitor_price: monitorPrice,
            username: CONFIG.username,
            dingtalk_token: CONFIG.dingtalk_token || '',
            dingtalk_secret: CONFIG.dingtalk_secret || ''
        };
        console.log('请求数据:', requestData);

        GM_xmlhttpRequest({
            method: 'POST',
            url: 'http://101.33.234.249:8000/update_monitor',
            headers: {
                'Content-Type': 'application/json'
            },
            data: JSON.stringify(requestData),
            onload: function(response) {
                console.log('服务器响应:', response.responseText);
                try {
                    const data = JSON.parse(response.responseText);
                    if (data.success) {
                        console.log('设置成功:', data.msg);
                        alert(data.msg || '设置成功！');
                        // 设置成功后，重新获取监控价格
                        fetchMonitorPricesForMore(coinType);
                    } else {
                        console.error('设置失败:', data.msg);
                        alert(data.msg || '设置失败！');
                    }
                } catch (e) {
                    console.error('解析响应数据失败:', e);
                    alert('返回数据解析失败！');
                }
            },
            onerror: function(error) {
                console.error('网络请求失败:', error);
                alert('网络请求失败，请重试！');
            }
        });
    }

    // 添加拖拽功能
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;

    function dragStart(e) {
        if (e.type === "touchstart") {
            initialX = e.touches[0].clientX - xOffset;
            initialY = e.touches[0].clientY - yOffset;
        } else {
            initialX = e.clientX - xOffset;
            initialY = e.clientY - yOffset;
        }

        if (e.target === sliderContainer || e.target === titleBar) {
            isDragging = true;
        }
    }

    function dragEnd(e) {
        initialX = currentX;
        initialY = currentY;
        isDragging = false;
    }

    function drag(e) {
        if (isDragging) {
            e.preventDefault();

            if (e.type === "touchmove") {
                currentX = e.touches[0].clientX - initialX;
                currentY = e.touches[0].clientY - initialY;
            } else {
                currentX = e.clientX - initialX;
                currentY = e.clientY - initialY;
            }

            xOffset = currentX;
            yOffset = currentY;

            setTranslate(currentX, currentY, sliderContainer);
        }
    }

    function setTranslate(xPos, yPos, el) {
        el.style.transform = `translate3d(${xPos}px, ${yPos}px, 0)`;
    }

    // 添加事件监听器
    sliderContainer.addEventListener("touchstart", dragStart, false);
    sliderContainer.addEventListener("touchend", dragEnd, false);
    sliderContainer.addEventListener("touchmove", drag, false);

    sliderContainer.addEventListener("mousedown", dragStart, false);
    sliderContainer.addEventListener("mouseup", dragEnd, false);
    sliderContainer.addEventListener("mousemove", drag, false);

    // 创建查看更多按钮
    const moreBtn = document.createElement('button');
    moreBtn.textContent = '查看更多';
    moreBtn.style.cssText = `
        background: #2B3139 !important;
        color: #F0B90B !important;
        border: 1px solid #F0B90B !important;
        padding: 4px 14px !important;
        border-radius: 4px !important;
        cursor: pointer !important;
        font-size: 14px !important;
        margin-top: 8px !important;
        font-weight: bold !important;
        transition: background 0.2s;
    `;

    // 创建更多区域
    const moreArea = document.createElement('div');
    moreArea.style.cssText = `
        width: 100%;
        background: #23272F;
        color: #F0B90B;
        border-radius: 0 0 8px 8px;
        margin-top: 10px;
        padding: 12px 8px 8px 8px;
        font-size: 15px;
        display: none;
        text-align: left;
    `;
    moreArea.innerHTML = '<div>最小监控价格：--</div><div>最大监控价格：--</div><div>区间百分比：--%</div>';

    let moreOpen = false;
    let moreMin = null;
    let moreMax = null;
    let moreCur = null;

    // 获取监控价格API
    function fetchMonitorPricesForMore(coinType, cb) {
        GM_xmlhttpRequest({
            method: 'POST',
            url: 'http://101.33.234.249:8000/query_monitor_price',
            headers: {
                'Content-Type': 'application/json'
            },
            data: JSON.stringify({
                token_name: coinType,
                username: CONFIG.username,
                dingtalk_token: CONFIG.dingtalk_token,
                dingtalk_secret: CONFIG.dingtalk_secret
            }),
            onload: function(response) {
                try {
                    const data = JSON.parse(response.responseText);
                    if (data.success) {
                        moreMax = parseFloat(data.data.max_prices[0]);
                        moreMin = parseFloat(data.data.min_prices[0]);
                        console.log('[监控区间] moreMin:', moreMin, 'moreMax:', moreMax);
                        // 保存用户等级信息
                        window.userLevelText = data.data.user_level_text || '';
                    } else {
                        moreMax = null;
                        moreMin = null;
                        window.userLevelText = '';
                    }
                } catch (e) {
                    moreMax = null;
                    moreMin = null;
                    window.userLevelText = '';
                }
                // 页面初始化时立即比对一次
                const curPrice = getRealtimePrice();
                console.log('[初始化] 当前价格:', curPrice);
                updatePriceColor(curPrice);
                cb && cb();
            },
            onerror: function() {
                moreMax = null;
                moreMin = null;
                window.userLevelText = '';
                const curPrice = getRealtimePrice();
                updatePriceColor(curPrice);
                cb && cb();
            }
        });
    }

    // 计算百分比
    function getPercent(cur, min, max) {
        if (min !== null && max !== null && !isNaN(min) && !isNaN(max) && max > min && cur !== null && !isNaN(cur)) {
            let percent = ((cur - min) / (max - min)) * 100;
            percent = Math.max(0, Math.min(100, percent));
            return percent.toFixed(2) + '%';
        }
        return '--%';
    }

    // 按钮点击事件
    moreBtn.onclick = function() {
        moreOpen = !moreOpen;
        if (moreOpen) {
            moreBtn.textContent = '收起更多';
            const coinType = getCoinType();
            // 获取当前价格
            let curPrice = parseFloat(priceInput.value);
            moreCur = curPrice;
            fetchMonitorPricesForMore(coinType, function() {
                let minStr = (moreMin !== null && !isNaN(moreMin)) ? moreMin : '--';
                let maxStr = (moreMax !== null && !isNaN(moreMax)) ? moreMax : '--';
                let percentStr = getPercent(moreCur, moreMin, moreMax);
                moreArea.innerHTML = `<div>最小监控价格：${minStr}</div><div>最大监控价格：${maxStr}</div><div>区间百分比：${percentStr}</div><div>${CONFIG.username}（${window.userLevelText || '--'}）</div>`;
                moreArea.style.display = '';
            });
        } else {
            moreBtn.textContent = '查看更多';
            moreArea.style.display = 'none';
        }
    };

    // 实时获取页面左上角价格
    function getRealtimePrice() {
        const div = Array.from(document.querySelectorAll('div'))
            .find(el => el.textContent.trim().startsWith('$') && el.textContent.match(/\d+\.\d+/));
        if (div) {
            // 提取 $ 后的第一个数字
            const match = div.textContent.match(/\$(\d+\.\d+)/);
            if (match) {
                return parseFloat(match[1]);
            }
        }
        return null;
    }

    // 更新价格显示颜色
    function updatePriceColor(price) {
        console.log('[比对颜色] 当前价格:', price, '最大:', moreMax, '最小:', moreMin);
        if (moreMax !== null && moreMin !== null && !isNaN(moreMax) && !isNaN(moreMin)) {
            if (price > moreMax) {
                priceDisplay.className = 'price-green';
                console.log('[比对结果] 变绿色');
            } else if (price < moreMin) {
                priceDisplay.className = 'price-red';
                console.log('[比对结果] 变红色');
            } else {
                priceDisplay.className = 'price-yellow';
                console.log('[比对结果] 默认黄色');
            }
        } else {
            priceDisplay.className = 'price-yellow';
            console.log('[比对结果] 区间无效，默认黄色');
        }
    }

    // 定时刷新弹窗价格、滑块、输入框
    setInterval(() => {
        const realPrice = getRealtimePrice();
        console.log('定时抓取到的页面现价:', realPrice);
        if (realPrice) {
            priceDisplay.textContent = `当前价格: $${realPrice.toFixed(6)}`;
            updatePriceColor(realPrice);
            // priceInput.value = realPrice.toFixed(6);
            // slider.value = realPrice;
        }
        console.log('priceDisplay:', priceDisplay.textContent, 'priceInput:', priceInput.value, 'slider:', slider.value);
    }, 1000);

    // 组装元素
    sliderContainer.appendChild(titleBar);
    contentDiv.appendChild(priceDisplay);
    contentDiv.appendChild(priceInput);
    contentDiv.appendChild(slider);
    contentDiv.appendChild(btnGroup);
    contentDiv.appendChild(moreArea);
    contentDiv.appendChild(moreBtn);
    sliderContainer.appendChild(contentDiv);
    document.body.appendChild(sliderContainer);
})();
